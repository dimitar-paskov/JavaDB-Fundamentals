01. Employees with Salary Above 35000

CREATE PROCEDURE usp_get_employees_salary_above_35000()
BEGIN
SELECT first_name, last_name
FROM employees
WHERE salary > 35000
ORDER BY first_name, last_name;
END;

02. Employees with Salary Above Number 


CREATE PROCEDURE usp_get_employees_salary_above(input_number DECIMAL(15,4))
BEGIN
SELECT first_name, last_name
FROM employees
WHERE salary >= input_number
ORDER BY first_name, last_name, employee_id;
END;



03. Town Names Starting With

CREATE PROCEDURE usp_get_towns_starting_with(input_str VARCHAR(255))
BEGIN
SELECT name
FROM towns t
WHERE t.`name` like concat(input_str, '%')
ORDER BY t.`name`;
END;

DELIMITER $$

CREATE PROCEDURE usp_get_towns_starting_with(input_str VARCHAR(255))
BEGIN
SELECT name
FROM towns t
WHERE t.`name` like concat(input_str, '%')
ORDER BY t.`name`;
END $$

DELIMITER ;
CALL usp_get_towns_starting_with('b');





04. Employees from Town

CREATE PROCEDURE usp_get_employees_from_town(input_str VARCHAR(255))
BEGIN
SELECT first_name, last_name
FROM employees e
JOIN addresses a
ON e.address_id = a.address_id
JOIN towns t
ON a.town_id = t.town_id
WHERE t.`name` like concat(input_str, '%')
ORDER BY e.first_name, e.last_name;
END




05. Salary Level Function

CREATE FUNCTION ufn_get_salary_level(salary DECIMAL(12,4))
 RETURNS VARCHAR(255)
BEGIN
DECLARE result VARCHAR(255);
IF(salary < 30000) THEN SET result := 'Low';
ELSEIF (salary BETWEEN 30000 AND 50000) THEN SET result:='Average';
ELSEIF (salary>50000) THEN SET result := 'High';
END IF;

RETURN result;


END;





06. Employees by Salary Level 

CREATE PROCEDURE usp_get_employees_by_salary_level(input_str VARCHAR(255))
BEGIN
SELECT first_name, last_name
FROM employees e
WHERE if(input_str = 'low', e.salary < 30000, if(input_str='average', e.salary BETWEEN 30000 AND 50000, if(input_str='high', e.salary > 50000, false)))
ORDER BY e.first_name DESC, e.last_name DESC;
END


-----------------
CREATE FUNCTION ufn_get_salary_level(salary DECIMAL(12,4))
 RETURNS VARCHAR(255)
BEGIN
DECLARE result VARCHAR(255);
IF(salary < 30000) THEN SET result := 'Low';
ELSEIF (salary BETWEEN 30000 AND 50000) THEN SET result:='Average';
ELSEIF (salary>50000) THEN SET result := 'High';
END IF;

RETURN result;


END;

CREATE PROCEDURE usp_get_employees_by_salary_level(input_str VARCHAR(255))
BEGIN
SELECT first_name, last_name
FROM employees e
WHERE ufn_get_salary_level(salary)=input_str
ORDER BY e.first_name DESC, e.last_name DESC;
END
--------------------




07. Define Function

CREATE FUNCTION ufn_is_word_comprised(letters varchar(50), word varchar(50))
 RETURNS INT
BEGIN
DECLARE indx INT; 
DECLARE symbol VARCHAR(1);

SET indx := 1;
WHILE indx <= CHAR_LENGTH(word) DO
	SET symbol := SUBSTRING(word, indx, 1);
	IF LOCATE(symbol,letters) = 0 THEN RETURN 0;
    END IF;
	SET indx := indx+1;
END WHILE;



RETURN 1;


END




08. Find Full Name

CREATE PROCEDURE usp_get_holders_full_name()
BEGIN
SELECT CONCAT(first_name,' ' , last_name) as full_name
FROM account_holders ah
ORDER BY full_name, ah.id;
END






9. People with Balance Higher Than

CREATE PROCEDURE usp_get_holders_with_balance_higher_than(treshold DECIMAL(12,4))
BEGIN
SELECT nt.first_name, nt.last_name
FROM
(SELECT ah.first_name, ah.last_name, ah.id as id, MIN(a.id) as MINAID
FROM account_holders ah
JOIN accounts a
ON a.account_holder_id = ah.id
GROUP BY ah.id
HAVING  SUM(balance) > treshold) as nt
JOIN account_holders ach
ON ach.id = nt.id
ORDER BY nt.MINAID;
END



10. Future Value Function


CREATE FUNCTION ufn_calculate_future_value(initial_sum DECIMAL(65,11), yearly_interest_rate DECIMAL(65,11),number_of_years DECIMAL(65,11))
 RETURNS VARCHAR(255)
BEGIN
DECLARE result DECIMAL(65,11);
SET result := POWER(1+yearly_interest_rate, number_of_years) * initial_sum;
RETURN TRIM(TRAILING '.' FROM TRIM(TRAILING '0' FROM result));
END




11. Calculating Interest

CREATE FUNCTION ufn_calculate_future_value(initial_sum DECIMAL(65,11), yearly_interest_rate DECIMAL(65,11),number_of_years DECIMAL(65,11))
 RETURNS VARCHAR(255)
BEGIN
DECLARE result DECIMAL(65,11);
SET result := POWER(1+yearly_interest_rate, number_of_years) * initial_sum;
RETURN TRIM(TRAILING '.' FROM TRIM(TRAILING '0' FROM result));
END; 



CREATE PROCEDURE usp_calculate_future_value_for_account(acc_id INT, ir DECIMAL(65,4))
BEGIN
SELECT a.id, ah.first_name, ah.last_name, a.balance, cast(ufn_calculate_future_value(a.balance, ir, 5) as DECIMAL(65,4)) as balance_in_5_years
FROM accounts a
JOIN account_holders ah
ON a.account_holder_id = ah.id
WHERE a.id = acc_id;
END




12. Deposit Money

CREATE PROCEDURE usp_deposit_money(acc_id INT, money_amount DECIMAL(65,11))
BEGIN
DECLARE delta DECIMAL(65,11);
SET delta := 0.0001;
START TRANSACTION;
IF money_amount <= 0 OR money_amount < delta THEN ROLLBACK;
ELSE 
UPDATE accounts as a
SET a.balance = a.balance + money_amount
WHERE a.id = acc_id;
END IF;

END

delimiter $$
create procedure usp_deposit_money(account_id int(11), money_amount decimal(19.4))
begin
start transaction;
if (money_amount < 0 and round(money_amount,4) <> money_amount ) then
rollback;
else
update accounts as a set a.balance = a.balance  + money_amount where a.id = account_id;
 
end if;
end $$ 100/100

CREATE PROCEDURE usp_deposit_money(account_id INT, money_amount INT)
BEGIN
        UPDATE accounts
        SET balance = balance + money_amount
        WHERE id = account_id;
END; 100/100


------------

DELIMITER $$

CREATE PROCEDURE usp_deposit_money(acc_id INT, money_amount DECIMAL(19,4))
BEGIN
DECLARE delta DECIMAL(65,11);
DECLARE balance DECIMAL(65,11);
DECLARE fraction VARCHAR(255);
SET delta := 0.0001;
SET balance := (SELECT balance from accounts WHERE id = acc_id);
SET fraction := TRIM(TRAILING '0' FROM(SELECT substring(money_amount, LOCATE('.', money_amount) + 1)));
SET fraction := TRIM(TRAILING '.' FROM fraction);


START TRANSACTION;



IF((SELECT id
            FROM accounts
            WHERE id = acc_id
            ) IS NULL
        ) THEN 
        SELECT('id not found');
        ROLLBACK;
ELSEIF money_amount <= 0 OR money_amount < delta  THEN 
SELECT ('money < 0');
ROLLBACK;
ELSEIF money_amount + balance > 999999999999999.9999  THEN 
SELECT('balance > limit');
ROLLBACK;
ELSEIF char_length(fraction) > 4  THEN 
SELECT('fraction more than 4')
ROLLBACK;
ELSE UPDATE accounts as a
SET a.balance = a.balance + money_amount
WHERE a.id = acc_id;
END IF;
END$$ 
    
DELIMITER ;
CALL usp_deposit_money(1,-10.123499);
------------



13. Withdraw Money

CREATE PROCEDURE usp_withdraw_money(acc_id INT, money_amount DECIMAL(65,11))
BEGIN

START TRANSACTION;
UPDATE accounts a
SET balance = balance - money_amount
WHERE id = acc_id;

IF (SELECT balance FROM accounts WHERE id = acc_id) < 0 OR money_amount < 0 THEN ROLLBACK;
END IF;


END

14. Money Transfer

CREATE PROCEDURE usp_transfer_money(from_account_id INT, to_account_id INT, amount DECIMAL(20, 4))
BEGIN
	START TRANSACTION;
		CASE WHEN 
			(SELECT a.id FROM accounts as a WHERE a.id = from_account_id) IS NULL
            OR (SELECT a.id FROM accounts as a WHERE a.id = to_account_id) IS NULL
            OR from_account_id = to_account_id
            OR amount < 0
            OR (SELECT a.balance FROM accounts as a WHERE a.id = from_account_id) < amount
		THEN ROLLBACK;
	ELSE 
		UPDATE accounts a
		SET a.balance = a.balance - amount
        WHERE a.id = from_account_id;
        
        UPDATE accounts a
		SET a.balance = a.balance + amount
        WHERE a.id = to_account_id;
	END CASE;
	COMMIT;
END

15. Log Accounts Trigger

CREATE TABLE logs(
log_id INT PRIMARY KEY AUTO_INCREMENT,
account_id INT, 
old_sum DECIMAL(19,4),
new_sum DECIMAL(19,4)
);

DELIMITER $$

CREATE TRIGGER tr_logs
AFTER UPDATE
ON accounts
FOR EACH ROW
BEGIN
INSERT INTO logs (account_id, old_sum, new_sum)
VALUES (OLD.id, OLD.balance, NEW.balance);
END$$

16. Emails Trigger

CREATE TABLE logs(
log_id INT PRIMARY KEY AUTO_INCREMENT,
account_id INT, 
old_sum DECIMAL(19,4),
new_sum DECIMAL(19,4)
);

CREATE TRIGGER tr_logs
AFTER UPDATE
ON accounts
FOR EACH ROW
BEGIN
INSERT INTO logs (account_id, old_sum, new_sum)
VALUES (OLD.id, OLD.balance, NEW.balance);
END;

CREATE TABLE notification_emails(
id INT PRIMARY KEY AUTO_INCREMENT,
recipient INT,
`subject` VARCHAR(255),
body VARCHAR(255)
);



CREATE TRIGGER tr_notification_emails
AFTER INSERT
ON `logs`
FOR EACH ROW
BEGIN
INSERT INTO notification_emails (recipient, `subject`, body)
VALUES (NEW.account_id, CONCAT('Balance change for account: ',NEW.account_id), 
CONCAT('On ', DATE_FORMAT(NOW(), "%M %d %Y"),' your balance was changed from ', NEW.old_sum, ' to ', NEW.new_sum, '.'));
END;








